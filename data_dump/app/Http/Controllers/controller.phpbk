<?php

namespace App\Http\Controllers;

use Carbon\Carbon;
use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Bus\DispatchesJobs;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;
use PDF;
use App\Models\Reports;
use App\Models\Setting;
use DOMDocument;
use DOMXPath;

class Controller extends BaseController
{
    use AuthorizesRequests, DispatchesJobs, ValidatesRequests;

    public function getRecallsData($data)
    {
        try {
            $opts = [
                'http' => [
                    'method' => 'GET',
                    'header' => "Content-Type: application/x-www-form-urlencoded\r\n"
                ]
            ];

            $apiURL  = "https://api.nhtsa.gov/recalls/recallsByVehicle?make=" . $data['make'] . "&model=" . $data['model'] . "&modelYear=" . $data['year'];
            $context = stream_context_create($opts);
            $fp      = @fopen($apiURL, 'rb', false, $context);

            $line_of_text = fgets($fp);
            $json = json_decode($line_of_text, true);

            @fclose($fp);
            return $json;
        } catch (\Exception $e) {
            return [];
        }
    }
    public function getComplainsData($data)
    {
        try {
            $opts = [
                'http' => [
                    'method' => 'GET',
                    'header' => "Content-Type: application/x-www-form-urlencoded\r\n"
                ]
            ];

            $apiURL  = "https://api.nhtsa.gov/complaints/complaintsByVehicle?make=" . $data['make'] . "&model=" . $data['model'] . "&modelYear=" . $data['year'];
            $context = stream_context_create($opts);
            $fp      = @fopen($apiURL, 'rb', false, $context);

            $line_of_text = fgets($fp);
            $json = json_decode($line_of_text, true);
            @fclose($fp);
            $cData = collect($json['results']);
            if ($json['count'] > 0)
                $cData = $cData->where('vin', $data['vin'])->toArray();

            return $cData;
        } catch (\Exception $e) {
            return [];
        }
    }
    public function getRatingsData($data)
    {
        try {
            $opts = [
                'http' => [
                    'method' => 'GET',
                    'header' => "Content-Type: application/x-www-form-urlencoded\r\n"
                ]
            ];

            $apiURL  = "https://api.nhtsa.gov/SafetyRatings/modelyear/{$data['year']}/make/{$data['make']}/model/{$data['model']}";
            $context = stream_context_create($opts);
            $fp      = @fopen($apiURL, 'rb', false, $context);

            $line_of_text = fgets($fp);
            $json = json_decode($line_of_text, true);

            @fclose($fp);
            $data = [];
            foreach ($json['Results'] as $key => $js) {
                $js['rating'] = $this->getRatingData($js['VehicleId']);
                $data[] = $js;
            }
            return $data;
        } catch (\Exception $e) {
            return [];
        }
    }

    public function getRatingData($VehicleId)
    {
        try {
            $opts = [
                'http' => [
                    'method' => 'GET',
                    'header' => "Content-Type: application/x-www-form-urlencoded\r\n"
                ]
            ];

            $apiURL  = "https://api.nhtsa.gov/SafetyRatings/VehicleId/{$VehicleId}";
            $context = stream_context_create($opts);
            $fp      = @fopen($apiURL, 'rb', false, $context);

            $line_of_text = fgets($fp);
            $json = json_decode($line_of_text, true);

            @fclose($fp);
            return $json['Results'][0];
        } catch (\Exception $e) {
            return [];
        }
    }

    public function getOwnersData($state)
    {
        try {
            $opts = [
                'http' => [
                    'method' => 'GET',
                    'header' => "Content-Type: application/x-www-form-urlencoded\r\n"
                ]
            ];

            $apiURL  = "https://api.nhtsa.gov/CSSIStation/state/" . $state;
            $context = stream_context_create($opts);
            $fp      = @fopen($apiURL, 'rb', false, $context);

            $line_of_text = fgets($fp);
            $json = json_decode($line_of_text, true);

            @fclose($fp);
            return $json;
        } catch (\Exception $e) {
            return [];
        }
    }

    public function checkNormalReport($vin) {
        $postdata = http_build_query(
            [
                'format' => 'json',
                'data' => $vin
            ]
        );
        $opts = [
            'http' => [
                'method' => 'POST',
                'header' => "Content-Type: application/x-www-form-urlencoded\r\n" .
                    "Content-Length: " . strlen($postdata) . "\r\n",
                'content' => $postdata
            ]
        ];

        $apiURL  = "https://vpic.nhtsa.dot.gov/api/vehicles/DecodeVINValuesBatch/";
        $context = stream_context_create($opts);
        $fp      = fopen($apiURL, 'rb', false, $context);

        $line_of_text = fgets($fp);
        $json         = json_decode($line_of_text, true);

        fclose($fp);

        
        $result = $json['Results'][0];

        if(empty(@$result['Make'])){
            return [
                'status' => false,
                'msg' => 'not available'
            ];
        }else{
            return [
                'status' => true,
                'msg' => 'available'
            ];
        }
        
    }

    public function getNormalReport($vin, $with = true, $title = false)
    {

        $postdata = http_build_query(
            [
                'format' => 'json',
                'data' => $vin
            ]
        );
        $opts = [
            'http' => [
                'method' => 'POST',
                'header' => "Content-Type: application/x-www-form-urlencoded\r\n" .
                    "Content-Length: " . strlen($postdata) . "\r\n",
                'content' => $postdata
            ]
        ];

        $apiURL  = "https://vpic.nhtsa.dot.gov/api/vehicles/DecodeVINValuesBatch/";
        $context = stream_context_create($opts);
        $fp      = fopen($apiURL, 'rb', false, $context);

        $line_of_text = fgets($fp);
        $json         = json_decode($line_of_text, true);

        fclose($fp);

        if ($with) {
            return $json['Results'][0];
        } else {
            $result = $json['Results'][0];

            $recallData = [
                'vin'  =>  $vin,
                'make'  =>  @$result['Make'],
                'model' => @$result['Model'],
                'year'  =>  @$result['ModelYear']
            ];
            $data = [
                'result'     => $result,
                'recalls'    => @$this->getRecallsData($recallData),
                'complaints' => @$this->getComplainsData(@$recallData),
                'ownerdata'  => [],
                'ratings'    => @$this->getRatingsData(@$recallData),
                'engine'     => $result['EngineModel'],
                'title'      => @$result['Make'] . ' ' . @$result['Model'] . " " . @$result['ModelYear'] . " " . @$result['BodyClass']
            ];

            if($title){
                return @$result['ModelYear'] . " " . @$result['Make'] . ' ' . @$result['Model'];
            }

            return $data;
        }
    }

    public function generateNormalReport($vin)
    {
        $report_id = rand(000000, 999999);
        $data = $this->getNormalReport($vin, false);
        $vinData = $this->checkMarketValue($vin);
        $vinDatas = $vinData['status'] ? $vinData : false;

        $result = [
            'vindata'    =>  @$data['result'],
            'recalldata' =>  @$data['recalls'],
            'ownerdata'  =>  @$data['ownerdata'],
            'ratings'    =>  @$data['ratings'],
            'engine'     =>  @$data['engine'],
            'complaints' =>  @$data['complaints'],
            'report_id'  =>  $report_id,
            'vehicle'    =>  @$data['title'],
            'reportdata' => @$vinDatas,
        ];
        $pdf = PDF::loadView('report_show', $result);
        $pdf->save('uploads/' . $report_id . '.pdf');
        return $report_id;
    }
    
    public function generateNewNormalReport($vin)
    {
        $report_id = rand(000000, 999999);
        $data = $this->getNormalReport($vin, false);
        $vinData = $this->checkMarketValue($vin);
        $vinDatas = $vinData['status'] ? $vinData : false;

        $result = [];
        $result['vindata']    =  @$data['result'];
        $result['recalldata'] =  @$data['recalls'];
        $result['ownerdata']  =  @$data['ownerdata'];
        $result['ratings']    =  @$data['ratings'];
        $result['engine']     =  @$data['engine'];
        $result['complaints'] =  @$data['complaints'];
        $result['report_id']  =  $report_id;
        $result['title']    =  @$data['title'];
        $result['reportdata'] = @$vinDatas;

        return view('reports.normal', $result)->render();
    }

    public function checkMarketValue($vin)
    {

        $oldAPI = [
            'url' => "https://vehicle-market-value.p.rapidapi.com/vmv?vin=" . $vin,
            'host' => "vehicle-market-value.p.rapidapi.com",
            'key'  => "aac6f5f4e7msh202c93ba7541b6ap1598f6jsn72b007c8faf4"
        ];

        $dataAPI = [
            'url' => "https://car-utils.p.rapidapi.com/marketvalue?vin=" . $vin,
            'host' => "car-utils.p.rapidapi.com",
            'key'  => "aac6f5f4e7msh202c93ba7541b6ap1598f6jsn72b007c8faf4"
        ];

        $curl = curl_init();

        curl_setopt_array($curl, [
            CURLOPT_URL => $dataAPI['url'],
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
                "X-RapidAPI-Host: " . $dataAPI['host'],
                "X-RapidAPI-Key: " . $dataAPI['key']
            ],
        ]);

        $response = curl_exec($curl);
        $err = curl_error($curl);

        curl_close($curl);

        if ($err) {
            echo "cURL Error #:" . $err;
            return [
                'status' => false,
                'error'  => 'cURL Error #:' . $err
            ];
        } else {
            $response = json_decode($response, true);
            
            if (!isset($response['error'])) {
                
                
                return [
                    'status'              => true,
                    'name'                => '<b>Market value for </b>' . $response['vehicle'],
                    'des'                 => 'Estimates based on <b>' . $response['count'] . ' similar vehicles sold</b> between ' .
                        Carbon::parse($response['period'][0])->format('d-M-Y') . ' - ' . Carbon::parse($response['period'][1])->format('d-M-Y'),
                    'below_average'       => '$' . number_format($response['prices']['below'], 0) . ' or less',
                    'market_average'      => '$' . number_format($response['prices']['average'], 0),
                    'above_average'       => '$' . number_format($response['prices']['above'], 0) . ' or more',
                    'market_value'        => '$' . number_format($response['prices']['below'], 0) . ' - $' . number_format($response['prices']['above'], 0),
                    'estimated_certainty' => $response['certainty'].'%',
                    'current_mileage'     => $response['mileage'] . ' Miles',
                    'time_period'         => 'Pass 6 months',

                ];
            } else {
                return [
                    'status' => false,
                    'error'  => 'No Data Found'
                ];
            }
        }
    }

    function getAutoCheckReport($vin)
    {

        $key = 'ef277a498299c62ca0e93ced1cdeb12e';
        
        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => "https://vini.az/en/api/report?key=$key&vin=$vin&type=autocheck",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'GET',
        ));

        $response = curl_exec($curl);

        $newJson = json_decode($response, true);
        curl_close($curl);
        if(@$newJson['error'] == 'report_error'){
            return false;
        }

        $html = $response;
        $title = $this->getNormalReport($vin, false, true);
        
        $response = $this->changeAutocheckTitle($html, $title, $vin);

        return $response;
    }
    function getCarfaxReport($vin)
    {

        $key = 'ef277a498299c62ca0e93ced1cdeb12e';

        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => "https://vini.az/en/api/report?key=$key&vin=$vin&type=carfax",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'GET',
        ));

        $response = curl_exec($curl);
        
        $newJson = json_decode($response, true);
        curl_close($curl);
        if(@$newJson['error'] == 'report_error'){
            return false;
        }
        $html = $response;
        $title = $this->getNormalReport($vin, false, true);
        
        $response = $this->changeCarfaxTitle($html, $title, $vin);

        return $response;
    }

    function checkViniReport($vin, $type = 'autocheck'){
        
        $key = 'ef277a498299c62ca0e93ced1cdeb12e';
        
        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL            => "https://vini.az/en/api/check?key=$key&vin=$vin&type=$type",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING       => '',
            CURLOPT_MAXREDIRS      => 10,
            CURLOPT_TIMEOUT        => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST  => 'GET',
        ));

        $response = curl_exec($curl);
        curl_close($curl);
        $data = json_decode($response, true);
        return $data['status'];
    }

    function generateReportAndSave($user_id, $vin, $save = false){
        
        $settings = Setting::first();
        $reportType = $settings->report_type;
        $html = '';

        $error = [
            'status' => false,
            'msg' => 'report not found'
        ];
        $success = [
            'status' => true,
            'msg' => 'founded',
            'page' => 1
        ];

        if($reportType == 'normal'){
            $checkMartekValue = $this->checkMarketValue($vin);
            if($checkMartekValue['status']){
                if(!$save)
                    return $success;
            
            
                $report_id  = $this->generateNormalReport($vin);
                $report_url = 'uploads/'.$report_id.'.pdf';
                $type       = 'default';
            }else{
                $checkAutocheckReport = $this->checkViniReport($vin, 'autocheck');
                if($checkAutocheckReport){
                    if(!$save)
                        return $success;
                    $html = $this->getAutoCheckReport($vin);
                    if(!$html) 
                        return $error;

                    $report_id  = rand(000000, 999999);
                    $report_url = 'reports/'.$report_id;
                    $type       = 'vini';
                } else {
                    $checkCarfaxReport = $this->checkViniReport($vin, 'carfax');
                    if($checkCarfaxReport){
                        if(!$save)
                            return $success;

                        $html       = $this->getCarfaxReport($vin);
                        if(!$html) 
                            return $error;

                        $report_id  = rand(000000, 999999);
                        $report_url = 'reports/'.$report_id;
                        $type       = 'carfax';
                    }else{
                        $checkNormalReport = $this->checkNormalReport($vin);
                        if(!$checkNormalReport['status'])
                            return $error;
                        
                        $success['page'] = 2;
                        if(!$save)
                            return $success;
                    
                        $report_id  = $this->generateNormalReport($vin);
                        $report_url = 'uploads/'.$report_id.'.pdf';
                        $type       = 'default';
                    }
                }   
            }
        }

        if($reportType == 'vini'){
            $checkAutocheckReport = $this->checkViniReport($vin, 'autocheck');
            if($checkAutocheckReport){
                if(!$save)
                    return $success;
                $html = $this->getAutoCheckReport($vin);
                if(!$html) 
                    return $error;
                $html       = str_replace('AutoCheck', 'My Elite Global', $html); 
                $report_id  = rand(000000, 999999);
                $report_url = 'reports/'.$report_id;
                $type       = 'vini';

            }else{
                $checkCarfaxReport = $this->checkViniReport($vin, 'carfax');
                if($checkCarfaxReport){
                    if(!$save)
                        return $success;
                    $html = $this->getCarfaxReport($vin);
                    if(!$html) 
                        return $error;

                    $report_id  = rand(000000, 999999);
                    $report_url = 'reports/'.$report_id;
                    $type       = 'carfax';
                }else{
                    $checkMartekValue = $this->checkMarketValue($vin);
                    if($checkMartekValue['status']){
                        if(!$save)
                            return $success;
                        $report_id  = $this->generateNormalReport($vin);
                        $report_url = 'uploads/'.$report_id.'.pdf';
                        $type       = 'default';
                    }else{
                        $checkNormalReport = $this->checkNormalReport($vin);
                        if(!$checkNormalReport['status'])
                            return $error;
                        
                        $success['page'] = 2;
                        if(!$save)
                            return $success;
                    
                        $report_id  = $this->generateNormalReport($vin);
                        $report_url = 'uploads/'.$report_id.'.pdf';
                        $type       = 'default';
                    }
                }          
            }
        }
        
        if($reportType == 'carfax'){
            $checkCarfaxReport = $this->checkViniReport($vin, 'carfax');
            if($checkCarfaxReport){
                if(!$save)
                    return $success;
                $html = $this->getCarfaxReport($vin);
                
                if(!$html) 
                    return $error;

                $report_id  = rand(000000, 999999);
                $report_url = 'reports/'.$report_id;
                $type       = 'carfax';
            }else{
                $checkAutocheckReport = $this->checkViniReport($vin, 'autocheck');
                if($checkAutocheckReport){
                    if(!$save)
                        return $success;
                    $html = $this->getAutoCheckReport($vin);
                    if(!$html) 
                        return $error;
                    $html       = str_replace('AutoCheck', 'My Elite Global', $html); 
                    $report_id  = rand(000000, 999999);
                    $report_url = 'reports/'.$report_id;
                    $type       = 'vini';
                }else{
                    $checkMartekValue = $this->checkMarketValue($vin);
                    if($checkMartekValue['status']){    
                        if(!$save)
                            return $success;
                        $report_id  = $this->generateNormalReport($vin);
                        $report_url = 'uploads/'.$report_id.'.pdf';
                        $type       = 'default';
                    }else{
                        $checkNormalReport = $this->checkNormalReport($vin);
                        if(!$checkNormalReport['status'])
                            return $error;
                        
                        $success['page'] = 2;
                        if(!$save)
                            return $success;
                    
                        $report_id  = $this->generateNormalReport($vin);
                        $report_url = 'uploads/'.$report_id.'.pdf';
                        $type       = 'default';
                    }
                }          
            }
        }
        

        $report             = new Reports;
        $report->user_id    = $user_id;
        $report->type       = $type;
        $report->report_id  = $report_id;
        $report->report_url = $report_url;
        $report->vin        = $vin;
        $report->response   = $html;
        $report->save();
                
        return $report;
   
    }

    function changeAutocheckTitle($html, $title, $vin = null){
        $html = str_replace('AutoCheck', 'Your', $html);
        $html = str_replace('My Elite Global', 'Your', $html);
        $html = str_replace('Experian Your Report', 'Experian Your Vehicle History Report', $html);
        $html = str_replace('www.autocheck.com/terms', '', $html);
        $html = str_replace('Your Score', 'Vehicle Score', $html);

        
        $dom = new DOMDocument();
        @$dom->loadHTML($html, LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD);

        
        // Create a new DOMXPath instance
        $xpath = new DOMXPath($dom);


        // Check if any elements were found
        $elements = $xpath->query('//div[contains(@class, "make-year-title")]');
        
        // Check if any elements were found
       if ($elements->length > 0) {
            // Get the first element with the class "make-year-title"
            $boxTitleDecode = $elements->item(0);
            
            // Update the first child node
            if ($boxTitleDecode->childNodes->length > 1) {
                $firstChild = $boxTitleDecode->childNodes->item(1);
                $firstChild->textContent = "$title";
            }
        
            // Clear the text content of the second child node
            if ($boxTitleDecode->childNodes->length > 3) {
                $secondChild = $boxTitleDecode->childNodes->item(3);
                $secondChild->textContent = ''; 
            }
            
            // Output the updated HTML
            $html = $dom->saveHTML();
        }

        // Use XPath to find the spans you want to replace within the "history" element
        $yearSpan = $xpath->query('//div[@id="history"]//span[strong/text()="Vehicle:"]/span[1]')->item(0);
        $modelSpan = $xpath->query('//div[@id="history"]//span[strong/text()="Vehicle:"]/span[2]')->item(0);
        if($yearSpan){
            $yearSpan->textContent = $title;
        }

        if($modelSpan){
            $modelSpan->textContent = '';
        }
        $html = $dom->saveHTML();
        
        try{
            $vehicalTemplate = $this->marketValueTemplateHtml($vin, $title);
            $vehicalTemplate = str_replace('&', '&amp;', $vehicalTemplate);
            $fragment = $dom->createDocumentFragment();
            $fragment->appendXML($vehicalTemplate);        
            
            $glossaryDiv = $dom->getElementById('glossary');

            if ($glossaryDiv) {
                $parent = $glossaryDiv->parentNode;
                $parent->insertBefore($fragment, $glossaryDiv);
            }
        }catch(\Exception $e){
            \Log::info($e->getMessage());
        }
        
        $html = $dom->saveHTML();
        return $html;
    }
    function changeCarfaxTitle($html, $title, $vin = null){
        $appName = ucfirst(env('APP_NAME', 'My Elite Global'));
        $html = str_replace('CARFAX ', " $appName ", $html);
        $html = str_replace(' CARFAX', " $appName ", $html);
        $html = str_replace('http://www.carfax.com/help', url('/'), $html);
        $html = str_replace('http://www.carfaxonline.com', url('/'), $html);
        $html = str_replace('www.carfax.com', 'home', $html);
        $html = str_replace('www.carfaxonline.com', 'home', $html);
        $html = str_replace('https://vini.az/', url('/').'/carfax/', $html);
        $html = str_replace('CarfaxLogo.svg', 'logo.png', $html);
        $html = str_replace('vhr_2.js', 'vhr_2', $html);
        
        $dom = new DOMDocument();
        @$dom->loadHTML($html, LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD);
        $xpath = new DOMXPath($dom);
                // Find the <title> element
        $titleNodeList = $xpath->query('//title');
        $footerNodeList = $xpath->query('//footer');
        $titleNodeList2 = $xpath->query('//*[@id="vehicle-information-panel"]/div/div[1]');

        // Check if <title> element exists
        if ($titleNodeList->length > 0) {
            // Get the first <title> element
            $titleNode = $titleNodeList->item(0);
            
            // Set new title
            $newTitle = $appName." Vehicle History Report for this ".$title." :".$vin;
            $titleNode->nodeValue = $newTitle;
        } 
        
        if ($titleNodeList2->length > 0) {
            $titleNode2 = $titleNodeList2->item(0);
            $titleNode2->nodeValue = $title;
        } 

        if ($footerNodeList->length > 0) {
            // Get the first <title> element
            $footerNode = $footerNodeList->item(0);
            
            while ($footerNode->hasChildNodes()) {
                $footerNode->removeChild($footerNode->firstChild);
            }
        } 

        try {
        
            $targetNodeList = $xpath->query('//*[@id="top-bar"]/div/img');
            
            // Check if the target node exists
            if ($targetNodeList->length > 0) {
                // Get the first target node
                $targetNode = $targetNodeList->item(0);
                
                // Create the button element
                $buttonElement = $dom->createElement('button');
                $buttonElement->setAttribute('id', 'singleSummaryButton');
                $buttonElement->setAttribute('name', 'singleSummaryButton');
                $buttonElement->setAttribute('onclick', 'javascript:window.print();return false;');
                $buttonElement->setAttribute('onmouseout', 'this.className=\'button\'');
                $buttonElement->setAttribute('onmouseover', 'this.className=\'buttonHover\'');
                $buttonElement->appendChild($dom->createTextNode('Print Report'));
                
                // Insert the button after the target node
                $targetNode->parentNode->insertBefore($buttonElement, $targetNode->nextSibling);
            }

            $vehicalTemplate = $this->marketValueTemplateHtml($vin, $title, 'carfax');
            $vehicalTemplate = str_replace('&', '&amp;', $vehicalTemplate);
            
            // Create a document fragment
            $fragment = $dom->createDocumentFragment();
            $fragment->appendXML($vehicalTemplate);        
            
            // Get the <footer> element(s)
            $glossaryDivList = $dom->getElementsByTagName('footer');
            
            // Check if <footer> element(s) exist
            if ($glossaryDivList->length > 0) {
                // Get the first <footer> element
                $glossaryDiv = $glossaryDivList->item(0);
                
                // Append the fragment to the <footer> element
                $glossaryDiv->appendChild($fragment);
            }
        } catch(\Exception $e) {
            \Log::info($e->getMessage());
        }
        
        $html = $dom->saveHTML();
        return $html;
    }

    function marketValueTemplateHtml($vin, $title, $type = 'vini'){
        $getVinDataApi = $this->checkMarketValue($vin);
        if(!$getVinDataApi['status']){
            return '<div></div>';
        }
        $htmt =  '<div>
        <div id="glossary">
          <div class="header">
            <span>'.($title ? '<b>Market value for </b>' . $title : $getVinDataApi['name']).'</span>
          </div>
          <div class="m-0 section-data">
            <div class="d-flex" style="display:flex;">
              <div style="width: 50%; height: 210px">
                <div
                  style="
                    border: 1px solid #d4d4d4;
                    height: 70px;
                    text-align: center;
                    padding-top: 10px;
                  "
                >
                  <span style="font-size: 18px" class="font-weight-bold"
                    >Below Market</span
                  ><br />
                  <span style="font-size: 12px">'.$getVinDataApi['below_average'].'</span>
                </div>
                <div
                  style="
                    border: 1px solid #d4d4d4;
                    height: 70px;
                    text-align: center;
                    padding-top: 10px;
                  "
                >
                  <span style="font-size: 18px; font-weight: 500">Market Average</span
                  ><br />
                  <span style="font-size: 12px">'.$getVinDataApi['market_average'].'</span>
                </div>
                <div
                  style="
                    border: 1px solid #d4d4d4;
                    height: 70px;
                    text-align: center;
                    padding-top: 10px;
                  "
                >
                  <span style="font-size: 18px; font-weight: 500">Above Market</span
                  ><br />
                  <span style="font-size: 12px">'.$getVinDataApi['above_average'].'</span>
                </div>
              </div>
              <div style="width: 50%; height: '. ($type == 'vini' ? '210px' : '245px'). '; float: right">
                <div
                  style="
                    border: 1px solid #d4d4d4;
                    height: 105px;
                    padding-left: 20px;
                    padding-top: 11px;
                  "
                >
                  <span style="font-size: 18px; font-weight: 500">ASSUMPTIONS </span
                  ><br />
                  <span style="font-size: 12px">Current Mileage: '.$getVinDataApi['current_mileage'].'</span
                  ><br />
                  <span style="font-size: 12px">Time Period: '.$getVinDataApi['time_period'].'</span>
                </div>
                <div
                  style="
                    border: 1px solid #d4d4d4;
                    height: '. ($type == 'vini' ? '105px' : '115px'). ';
                    padding-left: 20px;
                    padding-top: 11px;
                  "
                >
                  <span style="font-size: 18px; font-weight: 500">ESTIMATES </span
                  ><br />
                  <span style="font-size: 12px">Market Value: '.$getVinDataApi['market_value'].'</span
                  ><br />
                  <span style="font-size: 12px">Estimate Certaintv:  '.$getVinDataApi['estimated_certainty'].'</span>
                </div>
              </div>
            </div>
      
            <div
              style="'. ($type == 'vini' ? 'height: 50px; width: 100%; text-align: center; padding-top: 13px' : 'height: 38px;width: 100%;text-align: center;padding-top: 20px;border: 1px solid #d4d4d4;'). '"
            >
            '.$getVinDataApi['des'].'
            </div>
          </div>
        </div>
      </div>
      ';

      return $htmt;
    }
}
